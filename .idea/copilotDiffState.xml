<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/pvp/game/[roomId]/page.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/pvp/game/[roomId]/page.js" />
              <option name="originalContent" value="// src/app/pvp/game/[roomId]/page.js&#10;&quot;use client&quot;;&#10;&#10;import Link from 'next/link';&#10;import { useState, useEffect, useCallback, useMemo, useRef } from 'react';&#10;import { cardsDatabase } from '../../../../data/cardsDatabase';&#10;import CardImage from '../../../../components/Card/CardImage';&#10;&#10;export default function GameRoom({ params }) {&#10;  const [gameState, setGameState] = useState({&#10;    turn: 'player',&#10;    playerHealth: 100,&#10;    opponentHealth: 100,&#10;    playerUltimate: 0, // 0-100, ganha 10 por turno, 20 ao usar skill&#10;    opponentUltimate: 0,&#10;    turnNumber: 1,&#10;    actionUsed: false // Se já usou ação no turno (skill/ultimate/troca)&#10;  });&#10;&#10;  // Função para buscar carta por id e garantir todos os campos necessários&#10;  function getCardData(cardID) {&#10;    if (!cardID) return null;&#10;    const card = cardsDatabase.find(c =&gt; c.id === cardID);&#10;    if (!card) return null;&#10;    // Garante que abilities sempre existe e tem basic/ultimate/passive&#10;    return {&#10;      ...card,&#10;      abilities: {&#10;        basic: card.abilities?.basic || null,&#10;        ultimate: card.abilities?.ultimate || null,&#10;        passive: card.abilities?.passive || null&#10;      }&#10;    };&#10;  }&#10;&#10;  // 3 cartas na mão apenas&#10;  const [playerHand, setPlayerHand] = useState([&#10;    getCardData('cur001'), getCardData('cuc001'), getCardData('mul001')&#10;  ]);&#10;&#10;  // Uma carta ativa em campo para cada jogador&#10;  const [activeCards, setActiveCards] = useState({&#10;    player: null, // Carta ativa do jogador&#10;    opponent: getCardData('boi001') || null&#10;  });&#10;&#10;  // Estados para o novo visual&#10;  const [currentField, setCurrentField] = useState('floresta'); // Campo/terreno atual&#10;  const [fieldChangeCountdown, setFieldChangeCountdown] = useState(2); // Conta turnos até mudança&#10;&#10;  // Campos disponíveis com seus efeitos&#10;  const fields = useMemo(() =&gt; ({&#10;    floresta: { &#10;      name: 'Floresta Misteriosa', &#10;      icon: '', &#10;      bg: 'from-green-800/40 to-green-900/40',&#10;      bgImage: '/images/backgrounds/forest.jpg',&#10;      effect: 'Curupira +2 Defesa'&#10;    },&#10;    rio: { &#10;      name: 'Correnteza do Rio', &#10;      icon: '', &#10;      bg: 'from-blue-800/40 to-blue-900/40',&#10;      bgImage: '/images/backgrounds/river.jpg',&#10;      effect: 'Iara +2 Ataque'&#10;    },&#10;    caatinga: { &#10;      name: 'Caatinga Seca', &#10;      icon: '', &#10;      bg: 'from-yellow-800/40 to-orange-900/40',&#10;      bgImage: '/images/backgrounds/caatinga.jpg',&#10;      effect: 'Saci +1 Velocidade'&#10;    },&#10;    pantanal: { &#10;      name: 'Pântano Sombrio', &#10;      icon: '', &#10;      bg: 'from-purple-800/40 to-gray-900/40',&#10;      bgImage: '/images/backgrounds/swamp.jpg',&#10;      effect: 'Boto +3 Vida'&#10;    },&#10;    lua: { &#10;      name: 'Lua Cheia Ascendente', &#10;      icon: '', &#10;      bg: 'from-indigo-800/40 to-purple-900/40',&#10;      bgImage: '/images/backgrounds/moon.jpg',&#10;      effect: 'Todos +1 Habilidade'&#10;    }&#10;  }), []);&#10;&#10;  const [selectedCard, setSelectedCard] = useState(null);&#10;  const [gameLog, setGameLog] = useState([&#10;    { type: 'info', message: 'Jogo iniciado! Você começa.' },&#10;    { type: 'action', message: 'Oponente invocou Boitatá!' }&#10;  ]);&#10;&#10;  const [chatMessages, setChatMessages] = useState([&#10;    { player: 'opponent', message: 'Boa sorte!' },&#10;    { player: 'system', message: 'Jogador entrou na sala' }&#10;  ]);&#10;&#10;  const [newMessage, setNewMessage] = useState('');&#10;&#10;  // --- NOVO: Simulação de baralho e descarte ---&#10;  const [deck, setDeck] = useState([&#10;    getCardData('Boto'),&#10;    getCardData('Cuca'),&#10;    getCardData('Mula sem Cabeça'),&#10;    getCardData('Encourado'),&#10;    getCardData('Curupira'),&#10;    getCardData('Iara'),&#10;    getCardData('Saci-Pererê'),&#10;  ].filter(Boolean));&#10;  const [discardPile, setDiscardPile] = useState([]);&#10;  const [showSkillMenu, setShowSkillMenu] = useState(false);&#10;  const [bonusGlow, setBonusGlow] = useState(false);&#10;&#10;  // Compra automática de carta no início do turno do jogador&#10;  useEffect(() =&gt; {&#10;    if (gameState.turn === 'player') {&#10;      // Só compra se tiver menos de 3 cartas na mão e houver cartas no deck&#10;      if (playerHand.length &lt; 3 &amp;&amp; deck.length &gt; 0) {&#10;        const newCard = deck[0];&#10;        setPlayerHand(prev =&gt; [...prev, newCard]);&#10;        setDeck(prev =&gt; prev.slice(1));&#10;        // Animação: classe CSS temporária&#10;        setBonusGlow(true);&#10;        setTimeout(() =&gt; setBonusGlow(false), 800);&#10;      }&#10;    }&#10;  }, [gameState.turn]);&#10;&#10;  // Bônus visual para Encantado na &quot;casa&quot; do campo&#10;  useEffect(() =&gt; {&#10;    if (!activeCards.player) return;&#10;    // Exemplo: Curupira na Floresta&#10;    if (&#10;      (currentField === 'floresta' &amp;&amp; activeCards.player.name === 'Curupira') ||&#10;      (currentField === 'rio' &amp;&amp; activeCards.player.name === 'Iara') ||&#10;      (currentField === 'caatinga' &amp;&amp; activeCards.player.name === 'Saci-Pererê') ||&#10;      (currentField === 'pantanal' &amp;&amp; activeCards.player.name === 'Boto')&#10;    ) {&#10;      setBonusGlow(true);&#10;    } else {&#10;      setBonusGlow(false);&#10;    }&#10;  }, [currentField, activeCards.player]);&#10;&#10;  // Novo: animação de transição de campo&#10;  const [fieldTransitioning, setFieldTransitioning] = useState(false);&#10;  const fieldBgRef = useRef(null);&#10;&#10;  // Função para mudar campo a cada 2 turnos, agora com animação&#10;  const changeField = useCallback(() =&gt; {&#10;    setFieldTransitioning(true);&#10;    setTimeout(() =&gt; {&#10;      const fieldKeys = Object.keys(fields);&#10;      const currentIndex = fieldKeys.indexOf(currentField);&#10;      const nextIndex = (currentIndex + 1) % fieldKeys.length;&#10;      setCurrentField(fieldKeys[nextIndex]);&#10;      setFieldChangeCountdown(2);&#10;      setFieldTransitioning(false);&#10;      setGameLog(prev =&gt; [...prev, {&#10;        type: 'info',&#10;        message: `⚡ Campo mudou para: ${fields[fieldKeys[nextIndex]].name}!`&#10;      }]);&#10;    }, 900); // tempo da transição&#10;  }, [currentField, fields]);&#10;&#10;  // Simular ação do oponente&#10;  const simulateOpponentAction = useCallback(() =&gt; {&#10;    const actions = [&#10;      () =&gt; {&#10;        setGameLog(prev =&gt; [...prev, {&#10;          type: 'action',&#10;          message: 'Oponente está planejando...'&#10;        }]);&#10;      },&#10;      () =&gt; {&#10;        if (activeCards.opponent) {&#10;          setGameLog(prev =&gt; [...prev, {&#10;            type: 'combat',&#10;            message: 'Oponente está preparando um ataque!'&#10;          }]);&#10;        }&#10;      }&#10;    ];&#10;&#10;    const randomAction = actions[Math.floor(Math.random() * actions.length)];&#10;    randomAction();&#10;  }, [activeCards.opponent]);&#10;&#10;  useEffect(() =&gt; {&#10;    // Simular atualizações do jogo em tempo real&#10;    const gameInterval = setInterval(() =&gt; {&#10;      // Simular ações do oponente periodicamente&#10;      if (gameState.turn === 'opponent' &amp;&amp; Math.random() &lt; 0.3) {&#10;        simulateOpponentAction();&#10;      }&#10;    }, 2000);&#10;&#10;    return () =&gt; clearInterval(gameInterval);&#10;  }, [gameState.turn, simulateOpponentAction]);&#10;&#10;  // Colocar carta em campo (primeira vez ou trocar)&#10;  const playCard = (card) =&gt; {&#10;    if (gameState.turn !== 'player') {&#10;      alert('Não é seu turno!');&#10;      return;&#10;    }&#10;&#10;    if (gameState.actionUsed) {&#10;      alert('Você já usou sua ação neste turno!');&#10;      return;&#10;    }&#10;&#10;    // Se já tem carta ativa, vai para o descarte&#10;    if (activeCards.player) {&#10;      setDiscardPile(prev =&gt; [...prev, activeCards.player]);&#10;    }&#10;    setPlayerHand(prev =&gt; prev.filter(c =&gt; c.id !== card.id));&#10;    setActiveCards(prev =&gt; ({&#10;      ...prev,&#10;      player: {&#10;        ...card,&#10;        health: card.defense || card.health || 50,&#10;        maxHealth: card.defense || card.health || 50,&#10;        skillCooldown: 0,&#10;        ultimateCooldown: 0&#10;      }&#10;    }));&#10;    setGameState(prev =&gt; ({ ...prev, actionUsed: true }));&#10;    setGameLog(prev =&gt; [...prev, {&#10;      type: 'action',&#10;      message: `Você colocou ${card.name} em campo! (Passiva ativada)`&#10;    }]);&#10;    setSelectedCard(null);&#10;    setShowSkillMenu(false);&#10;  };&#10;&#10;  // Usar habilidade da carta ativa&#10;  const useSkill = () =&gt; {&#10;    if (gameState.turn !== 'player' || !activeCards.player) {&#10;      alert('Não é possível usar habilidade agora!');&#10;      return;&#10;    }&#10;&#10;    if (gameState.actionUsed) {&#10;      alert('Você já usou sua ação neste turno!');&#10;      return;&#10;    }&#10;&#10;    if (activeCards.player.skillCooldown &gt; 0) {&#10;      alert('Habilidade em cooldown!');&#10;      return;&#10;    }&#10;&#10;    const card = activeCards.player;&#10;    const skill = card.abilities?.basic; // Habilidade básica como skill&#10;&#10;    if (!skill) {&#10;      alert('Esta carta não possui habilidade!');&#10;      return;&#10;    }&#10;&#10;    // Aplicar efeito da skill&#10;    applySkillEffect(skill);&#10;&#10;    // Atualizar cooldown e ultimate&#10;    setActiveCards(prev =&gt; ({&#10;      ...prev,&#10;      player: {&#10;        ...prev.player,&#10;        skillCooldown: 2 // 2 turnos de cooldown&#10;      }&#10;    }));&#10;&#10;    setGameState(prev =&gt; ({&#10;      ...prev,&#10;      actionUsed: true,&#10;      playerUltimate: Math.min(100, prev.playerUltimate + 20)&#10;    }));&#10;&#10;    setGameLog(prev =&gt; [...prev, {&#10;      type: 'action',&#10;      message: `Você usou ${skill.name}!`&#10;    }]);&#10;  };&#10;&#10;  // Usar ultimate&#10;  const useUltimate = () =&gt; {&#10;    if (gameState.turn !== 'player' || !activeCards.player) {&#10;      alert('Não é possível usar ultimate agora!');&#10;      return;&#10;    }&#10;&#10;    if (gameState.actionUsed) {&#10;      alert('Você já usou sua ação neste turno!');&#10;      return;&#10;    }&#10;&#10;    if (gameState.playerUltimate &lt; 100) {&#10;      alert('Ultimate não está carregado!');&#10;      return;&#10;    }&#10;&#10;    const card = activeCards.player;&#10;    const ultimate = card.abilities?.ultimate || card.abilities?.basic; // Ultimate é a habilidade ultimate, se não tiver, usa a básica&#10;&#10;    if (!ultimate) {&#10;      alert('Esta carta não possui ultimate!');&#10;      return;&#10;    }&#10;&#10;    // Aplicar efeito do ultimate (mais forte)&#10;    applyUltimateEffect(ultimate);&#10;&#10;    setGameState(prev =&gt; ({&#10;      ...prev,&#10;      actionUsed: true,&#10;      playerUltimate: 0 // Zerar ultimate após uso&#10;    }));&#10;&#10;    setGameLog(prev =&gt; [...prev, {&#10;      type: 'combat',&#10;      message: ` ULTIMATE! Você usou ${ultimate.name}!`&#10;    }]);&#10;  };&#10;&#10;  // Aplicar efeitos das habilidades&#10;  const applySkillEffect = (skill) =&gt; {&#10;    if (skill.type === 'damage' &amp;&amp; activeCards.opponent) {&#10;      const damage = skill.value || 15;&#10;      setActiveCards(prev =&gt; ({&#10;        ...prev,&#10;        opponent: {&#10;          ...prev.opponent,&#10;          health: Math.max(0, prev.opponent.health - damage)&#10;        }&#10;      }));&#10;      &#10;      if (activeCards.opponent.health - damage &lt;= 0) {&#10;        setGameState(prev =&gt; ({&#10;          ...prev,&#10;          opponentHealth: Math.max(0, prev.opponentHealth - 20)&#10;        }));&#10;      }&#10;    } else if (skill.type === 'heal') {&#10;      const heal = skill.value || 10;&#10;      setGameState(prev =&gt; ({&#10;        ...prev,&#10;        playerHealth: Math.min(100, prev.playerHealth + heal)&#10;      }));&#10;    }&#10;  };&#10;&#10;  const applyUltimateEffect = (ultimate) =&gt; {&#10;    if (ultimate.type === 'damage' &amp;&amp; activeCards.opponent) {&#10;      const damage = (ultimate.value || 15) * 2; // Ultimate faz o dobro do dano&#10;      setActiveCards(prev =&gt; ({&#10;        ...prev,&#10;        opponent: {&#10;          ...prev.opponent,&#10;          health: Math.max(0, prev.opponent.health - damage)&#10;        }&#10;      }));&#10;      &#10;      if (activeCards.opponent.health - damage &lt;= 0) {&#10;        setGameState(prev =&gt; ({&#10;          ...prev,&#10;          opponentHealth: Math.max(0, prev.opponentHealth - 40)&#10;        }));&#10;      }&#10;    } else if (ultimate.type === 'heal') {&#10;      const heal = (ultimate.value || 10) * 2;&#10;      setGameState(prev =&gt; ({&#10;        ...prev,&#10;        playerHealth: Math.min(100, prev.playerHealth + heal)&#10;      }));&#10;    }&#10;  };&#10;&#10;  const endTurn = () =&gt; {&#10;    if (gameState.turn !== 'player') return;&#10;&#10;    // Reduzir cooldowns&#10;    if (activeCards.player?.skillCooldown &gt; 0) {&#10;      setActiveCards(prev =&gt; ({&#10;        ...prev,&#10;        player: {&#10;          ...prev.player,&#10;          skillCooldown: prev.player.skillCooldown - 1&#10;        }&#10;      }));&#10;    }&#10;&#10;    // Sistema de mudança de campo&#10;    let newFieldCountdown = fieldChangeCountdown - 1;&#10;    if (newFieldCountdown &lt;= 0) {&#10;      changeField();&#10;      newFieldCountdown = 2; // Resetar contador&#10;    } else {&#10;      setFieldChangeCountdown(newFieldCountdown);&#10;    }&#10;&#10;    setGameState(prev =&gt; ({&#10;      ...prev,&#10;      turn: 'opponent',&#10;      turnNumber: prev.turn === 'opponent' ? prev.turnNumber + 1 : prev.turnNumber,&#10;      playerUltimate: Math.min(100, prev.playerUltimate + 10), // +10 ultimate por turno&#10;      actionUsed: false // Resetar ação para próximo turno&#10;    }));&#10;&#10;    setGameLog(prev =&gt; [...prev, {&#10;      type: 'info',&#10;      message: `Turno finalizado. ${newFieldCountdown &gt; 0 ? `Campo muda em ${newFieldCountdown} turno(s).` : ''}`&#10;    }]);&#10;&#10;    // Simular turno do oponente&#10;    setTimeout(() =&gt; {&#10;      simulateOpponentTurn();&#10;      &#10;      setGameState(prev =&gt; ({&#10;        ...prev,&#10;        turn: 'player',&#10;        opponentUltimate: Math.min(100, prev.opponentUltimate + 10)&#10;      }));&#10;      &#10;      setGameLog(prev =&gt; [...prev, {&#10;        type: 'info',&#10;        message: 'Seu turno!'&#10;      }]);&#10;    }, 2000);&#10;  };&#10;&#10;  // Simular turno do oponente&#10;  const simulateOpponentTurn = () =&gt; {&#10;    if (!activeCards.opponent) return;&#10;&#10;    const actions = ['skill', 'wait'];&#10;    const action = actions[Math.floor(Math.random() * actions.length)];&#10;&#10;    if (action === 'skill' &amp;&amp; activeCards.opponent.abilities?.basic) {&#10;      // Oponente usa habilidade&#10;      const skill = activeCards.opponent.abilities.basic;&#10;&#10;      if (skill.type === 'damage' &amp;&amp; activeCards.player) {&#10;        const damage = skill.value || 10;&#10;        setActiveCards(prev =&gt; ({&#10;          ...prev,&#10;          player: {&#10;            ...prev.player,&#10;            health: Math.max(0, prev.player.health - damage)&#10;          }&#10;        }));&#10;        &#10;        if (activeCards.player.health - damage &lt;= 0) {&#10;          setGameState(prev =&gt; ({&#10;            ...prev,&#10;            playerHealth: Math.max(0, prev.playerHealth - 15)&#10;          }));&#10;        }&#10;      }&#10;&#10;      setGameLog(prev =&gt; [...prev, {&#10;        type: 'combat',&#10;        message: `Oponente usou ${skill.name}!`&#10;      }]);&#10;    } else {&#10;      setGameLog(prev =&gt; [...prev, {&#10;        type: 'info',&#10;        message: 'Oponente aguardou.'&#10;      }]);&#10;    }&#10;  };&#10;&#10;  const sendChatMessage = () =&gt; {&#10;    if (!newMessage.trim()) return;&#10;&#10;    setChatMessages(prev =&gt; [...prev, {&#10;      player: 'player',&#10;      message: newMessage&#10;    }]);&#10;    setNewMessage('');&#10;  };&#10;&#10;  // Função para obter cor da raridade&#10;  const getRarityColor = (rarity) =&gt; {&#10;    switch (rarity) {&#10;      case 'legendary': return 'border-yellow-400 bg-yellow-900/20';&#10;      case 'epic': return 'border-purple-400 bg-purple-900/20';&#10;      case 'rare': return 'border-blue-400 bg-blue-900/20';&#10;      default: return 'border-gray-400 bg-gray-900/20';&#10;    }&#10;  };&#10;&#10;  // Ao clicar no Encantado ativo, mostra menu de habilidades&#10;  const handleActiveCardClick = () =&gt; {&#10;    if (activeCards.player) setShowSkillMenu(v =&gt; !v);&#10;  };&#10;&#10;  // 1. Moldura tribal e barra de vida estilizada para avatares&#10;  const AvatarFrame = ({ avatar, name, hp, color, isActive }) =&gt; (&#10;    &lt;div className={`flex flex-col items-center gap-1 ${isActive ? 'ring-4 ring-yellow-400 animate-glow' : ''}`} style={{ minWidth: 70 }}&gt;&#10;      &lt;div className=&quot;relative flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;absolute -inset-1 z-0 rounded-full border-4 border-green-900 bg-gradient-to-br from-green-700/60 to-yellow-800/60 shadow-xl animate-pulse-slow&quot; style={{ filter: 'blur(2px)' }}&gt;&lt;/div&gt;&#10;        &lt;img src={avatar} alt={name} className=&quot;w-14 h-14 rounded-full border-4 border-yellow-700 z-10&quot; /&gt;&#10;        &lt;div className=&quot;absolute -bottom-2 left-1/2 -translate-x-1/2 flex items-center gap-1 bg-black/80 px-2 py-0.5 rounded-full border-2 border-yellow-400 shadow&quot;&gt;&#10;          &lt;span className=&quot;text-red-400 text-lg&quot;&gt;❤&lt;/span&gt;&#10;          &lt;span className=&quot;text-yellow-100 font-bold text-sm&quot;&gt;{hp}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;span className=&quot;text-xs font-bold text-yellow-200 drop-shadow&quot;&gt;{name}&lt;/span&gt;&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  // Painel de debug&#10;  const [debugOpen, setDebugOpen] = useState(false);&#10;  const [debugState, setDebugState] = useState({&#10;    playerHP: gameState.playerHealth,&#10;    opponentHP: gameState.opponentHealth,&#10;    field: currentField,&#10;    playerActive: activeCards.player?.id || '',&#10;    opponentActive: activeCards.opponent?.id || '',&#10;    hand: playerHand.map(c =&gt; c.id).join(',')&#10;  });&#10;&#10;  // Atualiza debugState ao mudar o jogo&#10;  useEffect(() =&gt; {&#10;    setDebugState({&#10;      playerHP: gameState.playerHealth,&#10;      opponentHP: gameState.opponentHealth,&#10;      field: currentField,&#10;      playerActive: activeCards.player?.id || '',&#10;      opponentActive: activeCards.opponent?.id || '',&#10;      hand: playerHand.map(c =&gt; c.id).join(',')&#10;    });&#10;  }, [gameState, currentField, activeCards, playerHand]);&#10;&#10;  function handleDebugChange(e) {&#10;    const { name, value } = e.target;&#10;    setDebugState(prev =&gt; ({ ...prev, [name]: value }));&#10;  }&#10;&#10;  function applyDebugState() {&#10;    setGameState(prev =&gt; ({&#10;      ...prev,&#10;      playerHealth: Number(debugState.playerHP),&#10;      opponentHealth: Number(debugState.opponentHP)&#10;    }));&#10;    setCurrentField(debugState.field);&#10;    setActiveCards(prev =&gt; ({&#10;      ...prev,&#10;      player: getCardData(debugState.playerActive),&#10;      opponent: getCardData(debugState.opponentActive)&#10;    }));&#10;    setPlayerHand(debugState.hand.split(',').map(id =&gt; getCardData(id)).filter(Boolean));&#10;  }&#10;&#10;  function debugPassTurn() {&#10;    endTurn();&#10;  }&#10;&#10;  // Função para obter a imagem de fundo do campo atual&#10;  const getFieldBgImage = () =&gt; {&#10;    return fields[currentField]?.bgImage || '/images/backgrounds/forest.jpg';&#10;  };&#10;&#10;  return (&#10;    &lt;div&#10;      style={{&#10;        minHeight: '100vh',&#10;        width: '100vw',&#10;        backgroundImage: `url(${getFieldBgImage()})`,&#10;        backgroundSize: 'cover',&#10;        backgroundPosition: 'center',&#10;        transition: 'background-image 0.8s cubic-bezier(0.4,0,0.2,1)'&#10;      }}&#10;    &gt;&#10;      {/* Botão flutuante de debug */}&#10;      &lt;button&#10;        onClick={() =&gt; setDebugOpen(v =&gt; !v)}&#10;        style={{ position: 'fixed', top: 16, right: 16, zIndex: 1000 }}&#10;        className=&quot;bg-pink-700 text-white px-3 py-2 rounded-full shadow-lg hover:bg-pink-800 transition&quot;&#10;      &gt;&#10;        {debugOpen ? 'Fechar Debug' : 'Debug'}&#10;      &lt;/button&gt;&#10;      {debugOpen &amp;&amp; (&#10;        &lt;div className=&quot;fixed top-20 right-4 z-[1001] bg-black/90 text-white p-4 rounded-xl shadow-2xl w-80 border-2 border-pink-600 flex flex-col gap-2 animate-fade-in&quot;&gt;&#10;          &lt;div className=&quot;font-bold text-lg mb-2&quot;&gt;Painel de Debug&lt;/div&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;HP Jogador&#10;            &lt;input type=&quot;number&quot; name=&quot;playerHP&quot; value={debugState.playerHP} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;HP Oponente&#10;            &lt;input type=&quot;number&quot; name=&quot;opponentHP&quot; value={debugState.opponentHP} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;Campo/Terreno&#10;            &lt;select name=&quot;field&quot; value={debugState.field} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot;&gt;&#10;              {Object.keys(fields).map(f =&gt; (&#10;                &lt;option key={f} value={f}&gt;{fields[f].name}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;Carta Ativa Jogador (id)&#10;            &lt;input type=&quot;text&quot; name=&quot;playerActive&quot; value={debugState.playerActive} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;Carta Ativa Oponente (id)&#10;            &lt;input type=&quot;text&quot; name=&quot;opponentActive&quot; value={debugState.opponentActive} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;Cartas na Mão (ids separados por vírgula)&#10;            &lt;input type=&quot;text&quot; name=&quot;hand&quot; value={debugState.hand} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;div className=&quot;flex gap-2 mt-2&quot;&gt;&#10;            &lt;button onClick={applyDebugState} className=&quot;bg-green-700 px-3 py-1 rounded hover:bg-green-800&quot;&gt;Aplicar&lt;/button&gt;&#10;            &lt;button onClick={debugPassTurn} className=&quot;bg-blue-700 px-3 py-1 rounded hover:bg-blue-800&quot;&gt;Passar Turno&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;main className={`min-h-screen text-white relative overflow-hidden bg-gradient-to-br ${fields[currentField].bg}`}&gt;&#10;        {/* Fundo animado do campo */}&#10;        &lt;div ref={fieldBgRef} className={`absolute inset-0 z-0 transition-all duration-1000 ${fieldTransitioning ? 'opacity-0 scale-105 blur-sm' : 'opacity-100 scale-100 blur-0'}`}&gt;&#10;          {/* Textura de fundo baseada no campo */}&#10;          &lt;div className=&quot;absolute inset-0 opacity-30&quot;&gt;&#10;            {currentField === 'floresta' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[radial-gradient(circle_at_30%_70%,rgba(34,197,94,0.3)_1px,transparent_1px)] bg-[length:60px_60px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'rio' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[linear-gradient(45deg,rgba(59,130,246,0.2)_25%,transparent_25%,transparent_75%,rgba(59,130,246,0.2)_75%)] bg-[length:40px_40px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'caatinga' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(245,158,11,0.3)_1px,transparent_1px)] bg-[length:80px_80px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'pantanal' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[linear-gradient(90deg,rgba(16,185,129,0.2)_50%,rgba(107,114,128,0.2)_50%)] bg-[length:60px_30px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'lua' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[radial-gradient(circle_at_50%_20%,rgba(147,51,234,0.4)_1px,transparent_1px)] bg-[length:100px_100px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          {/* Elementos decorativos do campo */}&#10;          &lt;div className=&quot;absolute inset-0 opacity-20 pointer-events-none&quot;&gt;&#10;            {currentField === 'floresta' &amp;&amp; (&#10;              &lt;div className=&quot;text-7xl absolute top-10 left-10 animate-pulse-slow&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'rio' &amp;&amp; (&#10;              &lt;div className=&quot;text-7xl absolute top-20 right-20 animate-bounce&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'caatinga' &amp;&amp; (&#10;              &lt;div className=&quot;text-7xl absolute bottom-20 left-20 animate-pulse&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'pantanal' &amp;&amp; (&#10;              &lt;div className=&quot;text-7xl absolute top-1/3 right-10 animate-bounce&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'lua' &amp;&amp; (&#10;              &lt;div className=&quot;text-9xl absolute top-10 right-1/3 animate-pulse&quot;&gt;&lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;relative z-10 h-screen p-2 flex flex-col justify-between&quot;&gt;&#10;          {/* Linha superior: Oponente e campo */}&#10;          &lt;div className=&quot;flex flex-row justify-between items-start w-full&quot;&gt;&#10;            {/* Canto superior esquerdo: Info do oponente */}&#10;            &lt;div className=&quot;flex flex-col items-start gap-2 mt-2 ml-2&quot;&gt;&#10;              &lt;AvatarFrame avatar=&quot;/images/avatars/opponent.png&quot; name=&quot;Oponente&quot; hp={gameState.opponentHealth} color=&quot;red&quot; isActive={gameState.turn==='opponent'} /&gt;&#10;            &lt;/div&gt;&#10;            {/* Centro superior: Encantado ativo do oponente */}&#10;            &lt;div className=&quot;flex flex-col items-center flex-1&quot;&gt;&#10;              &lt;div className=&quot;relative flex flex-col items-center&quot;&gt;&#10;                &lt;div className=&quot;w-32 h-32 rounded-full bg-gradient-to-t from-indigo-900/80 to-indigo-700/60 border-4 border-blue-400 flex items-center justify-center shadow-2xl mb-2 animate-pulse&quot;&gt;&#10;                  {activeCards.opponent &amp;&amp; (&#10;                    &lt;CardImage card={activeCards.opponent} className=&quot;w-24 h-24&quot; /&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-center text-xs text-blue-200 font-semibold&quot;&gt;&#10;                  {activeCards.opponent?.name || '---'}&#10;                &lt;/div&gt;&#10;                {/* Habilidades do oponente */}&#10;                {activeCards.opponent &amp;&amp; (&#10;                  &lt;div className=&quot;flex flex-row gap-2 mt-1 text-xs&quot;&gt;&#10;                    &lt;span className=&quot;bg-blue-900/60 px-2 py-0.5 rounded&quot;&gt;{activeCards.opponent.abilities?.basic?.name || '-'}&lt;/span&gt;&#10;                    &lt;span className=&quot;bg-yellow-900/60 px-2 py-0.5 rounded&quot;&gt;{activeCards.opponent.abilities?.ultimate?.name || '-'}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {/* Lado direito: Pilha de compra */}&#10;            &lt;div className=&quot;flex flex-col items-end gap-2 mt-2 mr-2&quot;&gt;&#10;              &lt;div className=&quot;flex flex-col items-center&quot;&gt;&#10;                &lt;div className=&quot;w-12 h-16 bg-blue-900/60 border-2 border-blue-400 rounded-lg flex items-center justify-center shadow-lg relative&quot;&gt;&#10;                  &lt;span className=&quot;text-blue-200 font-bold&quot;&gt;Compra&lt;/span&gt;&#10;                  {deck.length &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-blue-600 text-xs rounded-full px-2 py-0.5&quot;&gt;{deck.length}&lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;span className=&quot;text-xs text-blue-300 mt-1&quot;&gt;Baralho&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Centro do tabuleiro: Campo e Encantados */}&#10;          &lt;div className=&quot;relative flex flex-col items-center justify-center flex-1&quot;&gt;&#10;            {/* Indicador de campo/terreno atual */}&#10;            &lt;div className=&quot;absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-20 flex flex-col items-center&quot;&gt;&#10;              &lt;div className=&quot;flex items-center gap-2 bg-black/60 px-4 py-1 rounded-full border-2 border-yellow-400 shadow-lg&quot;&gt;&#10;                &lt;span className=&quot;text-2xl&quot;&gt;{fields[currentField].icon}&lt;/span&gt;&#10;                &lt;span className=&quot;font-bold text-yellow-100&quot;&gt;{fields[currentField].name}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-yellow-200 mt-1&quot;&gt;{fields[currentField].effect}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {/* Encantado ativo do jogador (centro inferior) */}&#10;            &lt;div className=&quot;absolute bottom-24 left-1/2 -translate-x-1/2 flex flex-col items-center z-10&quot;&gt;&#10;              &lt;div&#10;                className={`w-32 h-32 rounded-full bg-gradient-to-b from-amber-900/80 to-yellow-700/60 border-4 border-yellow-400 flex items-center justify-center shadow-2xl mb-2 animate-pulse cursor-pointer transition-all duration-300 ${bonusGlow ? 'ring-4 ring-green-400 shadow-green-400/60' : ''} ${gameState.turn === 'player' ? 'animate-glow' : ''}`}&#10;                onClick={handleActiveCardClick}&#10;                title=&quot;Clique para ver habilidades&quot;&#10;              &gt;&#10;                {activeCards.player &amp;&amp; (&#10;                  &lt;CardImage card={activeCards.player} className=&quot;w-24 h-24&quot; /&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-center text-xs text-yellow-200 font-semibold&quot;&gt;&#10;                {activeCards.player?.name || '---'}&#10;              &lt;/div&gt;&#10;              {/* Menu de habilidades ao clicar */}&#10;              {showSkillMenu &amp;&amp; activeCards.player &amp;&amp; (&#10;                &lt;div className=&quot;flex flex-row gap-3 mt-2 animate-fade-in&quot;&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-blue-400 shadow-lg hover:bg-blue-900/80 transition&quot;&#10;                    onClick={useSkill}&#10;                    disabled={gameState.actionUsed || activeCards.player.skillCooldown &gt; 0}&#10;                    title={activeCards.player.abilities?.basic?.description || 'Habilidade Básica'}&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;✨&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;{activeCards.player.abilities?.basic?.name || 'Skill'}&lt;/span&gt;&#10;                    {activeCards.player.skillCooldown &gt; 0 &amp;&amp; (&#10;                      &lt;span className=&quot;text-xs text-blue-200&quot;&gt;{activeCards.player.skillCooldown}t&lt;/span&gt;&#10;                    )}&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-yellow-400 shadow-lg hover:bg-yellow-900/80 transition&quot;&#10;                    onClick={useUltimate}&#10;                    disabled={gameState.actionUsed || gameState.playerUltimate &lt; 100}&#10;                    title={activeCards.player.abilities?.ultimate?.description || 'Ultimate'}&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;{activeCards.player.abilities?.ultimate?.name || 'Ultimate'}&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs text-yellow-200&quot;&gt;{gameState.playerUltimate}/100&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-green-400 shadow-lg hover:bg-green-900/80 transition&quot;&#10;                    onClick={endTurn}&#10;                    disabled={gameState.turn !== 'player'}&#10;                    title=&quot;Finalizar Turno&quot;&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;⏭️&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;Finalizar&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Linha inferior: Info do jogador, mão, habilidades */}&#10;          &lt;div className=&quot;flex flex-row justify-between items-end w-full mb-4&quot;&gt;&#10;            {/* Canto inferior esquerdo: Info do jogador */}&#10;            &lt;div className=&quot;flex flex-col items-start gap-2 ml-2 mb-2&quot;&gt;&#10;              &lt;AvatarFrame avatar=&quot;/images/avatars/player.jpg&quot; name=&quot;Você&quot; hp={gameState.playerHealth} color=&quot;yellow&quot; isActive={gameState.turn==='player'} /&gt;&#10;            &lt;/div&gt;&#10;            {/* Inferior central: Mão do jogador */}&#10;            &lt;div className=&quot;flex flex-row items-end justify-center flex-1 gap-[-2rem]&quot;&gt;&#10;              {playerHand.map((card, idx) =&gt; (&#10;                &lt;div&#10;                  key={card.id}&#10;                  className={`relative transition-transform duration-200 hover:z-20 hover:-translate-y-8 cursor-pointer -ml-8 ${selectedCard?.id === card.id ? 'ring-4 ring-yellow-400' : ''} ${bonusGlow &amp;&amp; idx === playerHand.length - 1 ? 'animate-card-draw' : ''}`}&#10;                  style={{ zIndex: idx + 1 }}&#10;                  onClick={() =&gt; setSelectedCard(card)}&#10;                  onDoubleClick={() =&gt; playCard(card)}&#10;                &gt;&#10;                  &lt;CardImage card={card} className=&quot;w-20 h-28 rounded-lg border-2 border-white/30 shadow-lg&quot; /&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;            {/* Inferior direito: Habilidades */}&#10;            &lt;div className=&quot;flex flex-col items-end gap-2 mr-4 mb-2&quot;&gt;&#10;              {activeCards.player &amp;&amp; (&#10;                &lt;div className=&quot;flex flex-row gap-3&quot;&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-blue-400 shadow-lg hover:bg-blue-900/80 transition&quot;&#10;                    onClick={useSkill}&#10;                    disabled={gameState.actionUsed || activeCards.player.skillCooldown &gt; 0}&#10;                    title={activeCards.player.abilities?.basic?.description || 'Habilidade Básica'}&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;✨&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;{activeCards.player.abilities?.basic?.name || 'Skill'}&lt;/span&gt;&#10;                    {activeCards.player.skillCooldown &gt; 0 &amp;&amp; (&#10;                      &lt;span className=&quot;text-xs text-blue-200&quot;&gt;{activeCards.player.skillCooldown}t&lt;/span&gt;&#10;                    )}&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-yellow-400 shadow-lg hover:bg-yellow-900/80 transition&quot;&#10;                    onClick={useUltimate}&#10;                    disabled={gameState.actionUsed || gameState.playerUltimate &lt; 100}&#10;                    title={activeCards.player.abilities?.ultimate?.description || 'Ultimate'}&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;{activeCards.player.abilities?.ultimate?.name || 'Ultimate'}&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs text-yellow-200&quot;&gt;{gameState.playerUltimate}/100&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          {/* Lado esquerdo: Pilha de descarte */}&#10;          &lt;div className=&quot;absolute left-0 top-1/2 -translate-y-1/2 flex flex-col items-center&quot;&gt;&#10;            &lt;div className=&quot;w-12 h-16 bg-gray-800/60 border-2 border-gray-400 rounded-lg flex items-center justify-center shadow-lg relative&quot;&gt;&#10;              &lt;span className=&quot;text-gray-200 font-bold&quot;&gt;Descarte&lt;/span&gt;&#10;              {discardPile.length &gt; 0 &amp;&amp; (&#10;                &lt;span className=&quot;absolute -top-2 -right-2 bg-red-600 text-xs rounded-full px-2 py-0.5&quot;&gt;{discardPile.length}&lt;/span&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;span className=&quot;text-xs text-gray-300 mt-1&quot;&gt;Desencanto&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          {/* Indicador de turno (brilho no avatar do jogador ativo) já incluso nas classes dos avatares) */}&#10;        &lt;/div&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="// src/app/pvp/game/[roomId]/page.js&#10;&quot;use client&quot;;&#10;&#10;import Link from 'next/link';&#10;import { useState, useEffect, useCallback, useMemo, useRef } from 'react';&#10;import { cardsDatabase } from '../../../../data/cardsDatabase';&#10;import CardImage from '../../../../components/Card/CardImage';&#10;import BoardBackground from '../../../../components/Board/BoardBackground';&#10;&#10;export default function GameRoom({ params }) {&#10;  const [gameState, setGameState] = useState({&#10;    turn: 'player',&#10;    playerHealth: 100,&#10;    opponentHealth: 100,&#10;    playerUltimate: 0, // 0-100, ganha 10 por turno, 20 ao usar skill&#10;    opponentUltimate: 0,&#10;    turnNumber: 1,&#10;    actionUsed: false // Se já usou ação no turno (skill/ultimate/troca)&#10;  });&#10;&#10;  // Função para buscar carta por id e garantir todos os campos necessários&#10;  function getCardData(cardID) {&#10;    if (!cardID) return null;&#10;    const card = cardsDatabase.find(c =&gt; c.id === cardID);&#10;    if (!card) return null;&#10;    // Garante que abilities sempre existe e tem basic/ultimate/passive&#10;    return {&#10;      ...card,&#10;      abilities: {&#10;        basic: card.abilities?.basic || null,&#10;        ultimate: card.abilities?.ultimate || null,&#10;        passive: card.abilities?.passive || null&#10;      }&#10;    };&#10;  }&#10;&#10;  // 3 cartas na mão apenas&#10;  const [playerHand, setPlayerHand] = useState([&#10;    getCardData('cur001'), getCardData('cuc001'), getCardData('mul001')&#10;  ]);&#10;&#10;  // Uma carta ativa em campo para cada jogador&#10;  const [activeCards, setActiveCards] = useState({&#10;    player: null, // Carta ativa do jogador&#10;    opponent: getCardData('boi001') || null&#10;  });&#10;&#10;  // Estados para o novo visual&#10;  const [currentField, setCurrentField] = useState('floresta'); // Campo/terreno atual&#10;  const [fieldChangeCountdown, setFieldChangeCountdown] = useState(2); // Conta turnos até mudança&#10;&#10;  // Campos disponíveis com seus efeitos&#10;  const fields = useMemo(() =&gt; ({&#10;    floresta: { &#10;      name: 'Floresta Misteriosa', &#10;      icon: '', &#10;      bg: 'from-green-800/40 to-green-900/40',&#10;      bgImage: '/images/backgrounds/forest.jpg',&#10;      effect: 'Curupira +2 Defesa'&#10;    },&#10;    rio: { &#10;      name: 'Correnteza do Rio', &#10;      icon: '', &#10;      bg: 'from-blue-800/40 to-blue-900/40',&#10;      bgImage: '/images/backgrounds/river.jpg',&#10;      effect: 'Iara +2 Ataque'&#10;    },&#10;    caatinga: { &#10;      name: 'Caatinga Seca', &#10;      icon: '', &#10;      bg: 'from-yellow-800/40 to-orange-900/40',&#10;      bgImage: '/images/backgrounds/caatinga.jpg',&#10;      effect: 'Saci +1 Velocidade'&#10;    },&#10;    pantanal: { &#10;      name: 'Pântano Sombrio', &#10;      icon: '', &#10;      bg: 'from-purple-800/40 to-gray-900/40',&#10;      bgImage: '/images/backgrounds/swamp.jpg',&#10;      effect: 'Boto +3 Vida'&#10;    },&#10;    lua: { &#10;      name: 'Lua Cheia Ascendente', &#10;      icon: '', &#10;      bg: 'from-indigo-800/40 to-purple-900/40',&#10;      bgImage: '/images/backgrounds/moon.jpg',&#10;      effect: 'Todos +1 Habilidade'&#10;    }&#10;  }), []);&#10;&#10;  const [selectedCard, setSelectedCard] = useState(null);&#10;  const [gameLog, setGameLog] = useState([&#10;    { type: 'info', message: 'Jogo iniciado! Você começa.' },&#10;    { type: 'action', message: 'Oponente invocou Boitatá!' }&#10;  ]);&#10;&#10;  const [chatMessages, setChatMessages] = useState([&#10;    { player: 'opponent', message: 'Boa sorte!' },&#10;    { player: 'system', message: 'Jogador entrou na sala' }&#10;  ]);&#10;&#10;  const [newMessage, setNewMessage] = useState('');&#10;&#10;  // --- NOVO: Simulação de baralho e descarte ---&#10;  const [deck, setDeck] = useState([&#10;    getCardData('Boto'),&#10;    getCardData('Cuca'),&#10;    getCardData('Mula sem Cabeça'),&#10;    getCardData('Encourado'),&#10;    getCardData('Curupira'),&#10;    getCardData('Iara'),&#10;    getCardData('Saci-Pererê'),&#10;  ].filter(Boolean));&#10;  const [discardPile, setDiscardPile] = useState([]);&#10;  const [showSkillMenu, setShowSkillMenu] = useState(false);&#10;  const [bonusGlow, setBonusGlow] = useState(false);&#10;&#10;  // Compra automática de carta no início do turno do jogador&#10;  useEffect(() =&gt; {&#10;    if (gameState.turn === 'player') {&#10;      // Só compra se tiver menos de 3 cartas na mão e houver cartas no deck&#10;      if (playerHand.length &lt; 3 &amp;&amp; deck.length &gt; 0) {&#10;        const newCard = deck[0];&#10;        setPlayerHand(prev =&gt; [...prev, newCard]);&#10;        setDeck(prev =&gt; prev.slice(1));&#10;        // Animação: classe CSS temporária&#10;        setBonusGlow(true);&#10;        setTimeout(() =&gt; setBonusGlow(false), 800);&#10;      }&#10;    }&#10;  }, [gameState.turn]);&#10;&#10;  // Bônus visual para Encantado na &quot;casa&quot; do campo&#10;  useEffect(() =&gt; {&#10;    if (!activeCards.player) return;&#10;    // Exemplo: Curupira na Floresta&#10;    if (&#10;      (currentField === 'floresta' &amp;&amp; activeCards.player.name === 'Curupira') ||&#10;      (currentField === 'rio' &amp;&amp; activeCards.player.name === 'Iara') ||&#10;      (currentField === 'caatinga' &amp;&amp; activeCards.player.name === 'Saci-Pererê') ||&#10;      (currentField === 'pantanal' &amp;&amp; activeCards.player.name === 'Boto')&#10;    ) {&#10;      setBonusGlow(true);&#10;    } else {&#10;      setBonusGlow(false);&#10;    }&#10;  }, [currentField, activeCards.player]);&#10;&#10;  // Novo: animação de transição de campo&#10;  const [fieldTransitioning, setFieldTransitioning] = useState(false);&#10;  const fieldBgRef = useRef(null);&#10;&#10;  // Função para mudar campo a cada 2 turnos, agora com animação&#10;  const changeField = useCallback(() =&gt; {&#10;    setFieldTransitioning(true);&#10;    setTimeout(() =&gt; {&#10;      const fieldKeys = Object.keys(fields);&#10;      const currentIndex = fieldKeys.indexOf(currentField);&#10;      const nextIndex = (currentIndex + 1) % fieldKeys.length;&#10;      setCurrentField(fieldKeys[nextIndex]);&#10;      setFieldChangeCountdown(2);&#10;      setFieldTransitioning(false);&#10;      setGameLog(prev =&gt; [...prev, {&#10;        type: 'info',&#10;        message: `⚡ Campo mudou para: ${fields[fieldKeys[nextIndex]].name}!`&#10;      }]);&#10;    }, 900); // tempo da transição&#10;  }, [currentField, fields]);&#10;&#10;  // Simular ação do oponente&#10;  const simulateOpponentAction = useCallback(() =&gt; {&#10;    const actions = [&#10;      () =&gt; {&#10;        setGameLog(prev =&gt; [...prev, {&#10;          type: 'action',&#10;          message: 'Oponente está planejando...'&#10;        }]);&#10;      },&#10;      () =&gt; {&#10;        if (activeCards.opponent) {&#10;          setGameLog(prev =&gt; [...prev, {&#10;            type: 'combat',&#10;            message: 'Oponente está preparando um ataque!'&#10;          }]);&#10;        }&#10;      }&#10;    ];&#10;&#10;    const randomAction = actions[Math.floor(Math.random() * actions.length)];&#10;    randomAction();&#10;  }, [activeCards.opponent]);&#10;&#10;  useEffect(() =&gt; {&#10;    // Simular atualizações do jogo em tempo real&#10;    const gameInterval = setInterval(() =&gt; {&#10;      // Simular ações do oponente periodicamente&#10;      if (gameState.turn === 'opponent' &amp;&amp; Math.random() &lt; 0.3) {&#10;        simulateOpponentAction();&#10;      }&#10;    }, 2000);&#10;&#10;    return () =&gt; clearInterval(gameInterval);&#10;  }, [gameState.turn, simulateOpponentAction]);&#10;&#10;  // Colocar carta em campo (primeira vez ou trocar)&#10;  const playCard = (card) =&gt; {&#10;    if (gameState.turn !== 'player') {&#10;      alert('Não é seu turno!');&#10;      return;&#10;    }&#10;&#10;    if (gameState.actionUsed) {&#10;      alert('Você já usou sua ação neste turno!');&#10;      return;&#10;    }&#10;&#10;    // Se já tem carta ativa, vai para o descarte&#10;    if (activeCards.player) {&#10;      setDiscardPile(prev =&gt; [...prev, activeCards.player]);&#10;    }&#10;    setPlayerHand(prev =&gt; prev.filter(c =&gt; c.id !== card.id));&#10;    setActiveCards(prev =&gt; ({&#10;      ...prev,&#10;      player: {&#10;        ...card,&#10;        health: card.defense || card.health || 50,&#10;        maxHealth: card.defense || card.health || 50,&#10;        skillCooldown: 0,&#10;        ultimateCooldown: 0&#10;      }&#10;    }));&#10;    setGameState(prev =&gt; ({ ...prev, actionUsed: true }));&#10;    setGameLog(prev =&gt; [...prev, {&#10;      type: 'action',&#10;      message: `Você colocou ${card.name} em campo! (Passiva ativada)`&#10;    }]);&#10;    setSelectedCard(null);&#10;    setShowSkillMenu(false);&#10;  };&#10;&#10;  // Usar habilidade da carta ativa&#10;  const useSkill = () =&gt; {&#10;    if (gameState.turn !== 'player' || !activeCards.player) {&#10;      alert('Não é possível usar habilidade agora!');&#10;      return;&#10;    }&#10;&#10;    if (gameState.actionUsed) {&#10;      alert('Você já usou sua ação neste turno!');&#10;      return;&#10;    }&#10;&#10;    if (activeCards.player.skillCooldown &gt; 0) {&#10;      alert('Habilidade em cooldown!');&#10;      return;&#10;    }&#10;&#10;    const card = activeCards.player;&#10;    const skill = card.abilities?.basic; // Habilidade básica como skill&#10;&#10;    if (!skill) {&#10;      alert('Esta carta não possui habilidade!');&#10;      return;&#10;    }&#10;&#10;    // Aplicar efeito da skill&#10;    applySkillEffect(skill);&#10;&#10;    // Atualizar cooldown e ultimate&#10;    setActiveCards(prev =&gt; ({&#10;      ...prev,&#10;      player: {&#10;        ...prev.player,&#10;        skillCooldown: 2 // 2 turnos de cooldown&#10;      }&#10;    }));&#10;&#10;    setGameState(prev =&gt; ({&#10;      ...prev,&#10;      actionUsed: true,&#10;      playerUltimate: Math.min(100, prev.playerUltimate + 20)&#10;    }));&#10;&#10;    setGameLog(prev =&gt; [...prev, {&#10;      type: 'action',&#10;      message: `Você usou ${skill.name}!`&#10;    }]);&#10;  };&#10;&#10;  // Usar ultimate&#10;  const useUltimate = () =&gt; {&#10;    if (gameState.turn !== 'player' || !activeCards.player) {&#10;      alert('Não é possível usar ultimate agora!');&#10;      return;&#10;    }&#10;&#10;    if (gameState.actionUsed) {&#10;      alert('Você já usou sua ação neste turno!');&#10;      return;&#10;    }&#10;&#10;    if (gameState.playerUltimate &lt; 100) {&#10;      alert('Ultimate não está carregado!');&#10;      return;&#10;    }&#10;&#10;    const card = activeCards.player;&#10;    const ultimate = card.abilities?.ultimate || card.abilities?.basic; // Ultimate é a habilidade ultimate, se não tiver, usa a básica&#10;&#10;    if (!ultimate) {&#10;      alert('Esta carta não possui ultimate!');&#10;      return;&#10;    }&#10;&#10;    // Aplicar efeito do ultimate (mais forte)&#10;    applyUltimateEffect(ultimate);&#10;&#10;    setGameState(prev =&gt; ({&#10;      ...prev,&#10;      actionUsed: true,&#10;      playerUltimate: 0 // Zerar ultimate após uso&#10;    }));&#10;&#10;    setGameLog(prev =&gt; [...prev, {&#10;      type: 'combat',&#10;      message: ` ULTIMATE! Você usou ${ultimate.name}!`&#10;    }]);&#10;  };&#10;&#10;  // Aplicar efeitos das habilidades&#10;  const applySkillEffect = (skill) =&gt; {&#10;    if (skill.type === 'damage' &amp;&amp; activeCards.opponent) {&#10;      const damage = skill.value || 15;&#10;      setActiveCards(prev =&gt; ({&#10;        ...prev,&#10;        opponent: {&#10;          ...prev.opponent,&#10;          health: Math.max(0, prev.opponent.health - damage)&#10;        }&#10;      }));&#10;      &#10;      if (activeCards.opponent.health - damage &lt;= 0) {&#10;        setGameState(prev =&gt; ({&#10;          ...prev,&#10;          opponentHealth: Math.max(0, prev.opponentHealth - 20)&#10;        }));&#10;      }&#10;    } else if (skill.type === 'heal') {&#10;      const heal = skill.value || 10;&#10;      setGameState(prev =&gt; ({&#10;        ...prev,&#10;        playerHealth: Math.min(100, prev.playerHealth + heal)&#10;      }));&#10;    }&#10;  };&#10;&#10;  const applyUltimateEffect = (ultimate) =&gt; {&#10;    if (ultimate.type === 'damage' &amp;&amp; activeCards.opponent) {&#10;      const damage = (ultimate.value || 15) * 2; // Ultimate faz o dobro do dano&#10;      setActiveCards(prev =&gt; ({&#10;        ...prev,&#10;        opponent: {&#10;          ...prev.opponent,&#10;          health: Math.max(0, prev.opponent.health - damage)&#10;        }&#10;      }));&#10;      &#10;      if (activeCards.opponent.health - damage &lt;= 0) {&#10;        setGameState(prev =&gt; ({&#10;          ...prev,&#10;          opponentHealth: Math.max(0, prev.opponentHealth - 40)&#10;        }));&#10;      }&#10;    } else if (ultimate.type === 'heal') {&#10;      const heal = (ultimate.value || 10) * 2;&#10;      setGameState(prev =&gt; ({&#10;        ...prev,&#10;        playerHealth: Math.min(100, prev.playerHealth + heal)&#10;      }));&#10;    }&#10;  };&#10;&#10;  const endTurn = () =&gt; {&#10;    if (gameState.turn !== 'player') return;&#10;&#10;    // Reduzir cooldowns&#10;    if (activeCards.player?.skillCooldown &gt; 0) {&#10;      setActiveCards(prev =&gt; ({&#10;        ...prev,&#10;        player: {&#10;          ...prev.player,&#10;          skillCooldown: prev.player.skillCooldown - 1&#10;        }&#10;      }));&#10;    }&#10;&#10;    // Sistema de mudança de campo&#10;    let newFieldCountdown = fieldChangeCountdown - 1;&#10;    if (newFieldCountdown &lt;= 0) {&#10;      changeField();&#10;      newFieldCountdown = 2; // Resetar contador&#10;    } else {&#10;      setFieldChangeCountdown(newFieldCountdown);&#10;    }&#10;&#10;    setGameState(prev =&gt; ({&#10;      ...prev,&#10;      turn: 'opponent',&#10;      turnNumber: prev.turn === 'opponent' ? prev.turnNumber + 1 : prev.turnNumber,&#10;      playerUltimate: Math.min(100, prev.playerUltimate + 10), // +10 ultimate por turno&#10;      actionUsed: false // Resetar ação para próximo turno&#10;    }));&#10;&#10;    setGameLog(prev =&gt; [...prev, {&#10;      type: 'info',&#10;      message: `Turno finalizado. ${newFieldCountdown &gt; 0 ? `Campo muda em ${newFieldCountdown} turno(s).` : ''}`&#10;    }]);&#10;&#10;    // Simular turno do oponente&#10;    setTimeout(() =&gt; {&#10;      simulateOpponentTurn();&#10;      &#10;      setGameState(prev =&gt; ({&#10;        ...prev,&#10;        turn: 'player',&#10;        opponentUltimate: Math.min(100, prev.opponentUltimate + 10)&#10;      }));&#10;      &#10;      setGameLog(prev =&gt; [...prev, {&#10;        type: 'info',&#10;        message: 'Seu turno!'&#10;      }]);&#10;    }, 2000);&#10;  };&#10;&#10;  // Simular turno do oponente&#10;  const simulateOpponentTurn = () =&gt; {&#10;    if (!activeCards.opponent) return;&#10;&#10;    const actions = ['skill', 'wait'];&#10;    const action = actions[Math.floor(Math.random() * actions.length)];&#10;&#10;    if (action === 'skill' &amp;&amp; activeCards.opponent.abilities?.basic) {&#10;      // Oponente usa habilidade&#10;      const skill = activeCards.opponent.abilities.basic;&#10;&#10;      if (skill.type === 'damage' &amp;&amp; activeCards.player) {&#10;        const damage = skill.value || 10;&#10;        setActiveCards(prev =&gt; ({&#10;          ...prev,&#10;          player: {&#10;            ...prev.player,&#10;            health: Math.max(0, prev.player.health - damage)&#10;          }&#10;        }));&#10;        &#10;        if (activeCards.player.health - damage &lt;= 0) {&#10;          setGameState(prev =&gt; ({&#10;            ...prev,&#10;            playerHealth: Math.max(0, prev.playerHealth - 15)&#10;          }));&#10;        }&#10;      }&#10;&#10;      setGameLog(prev =&gt; [...prev, {&#10;        type: 'combat',&#10;        message: `Oponente usou ${skill.name}!`&#10;      }]);&#10;    } else {&#10;      setGameLog(prev =&gt; [...prev, {&#10;        type: 'info',&#10;        message: 'Oponente aguardou.'&#10;      }]);&#10;    }&#10;  };&#10;&#10;  const sendChatMessage = () =&gt; {&#10;    if (!newMessage.trim()) return;&#10;&#10;    setChatMessages(prev =&gt; [...prev, {&#10;      player: 'player',&#10;      message: newMessage&#10;    }]);&#10;    setNewMessage('');&#10;  };&#10;&#10;  // Função para obter cor da raridade&#10;  const getRarityColor = (rarity) =&gt; {&#10;    switch (rarity) {&#10;      case 'legendary': return 'border-yellow-400 bg-yellow-900/20';&#10;      case 'epic': return 'border-purple-400 bg-purple-900/20';&#10;      case 'rare': return 'border-blue-400 bg-blue-900/20';&#10;      default: return 'border-gray-400 bg-gray-900/20';&#10;    }&#10;  };&#10;&#10;  // Ao clicar no Encantado ativo, mostra menu de habilidades&#10;  const handleActiveCardClick = () =&gt; {&#10;    if (activeCards.player) setShowSkillMenu(v =&gt; !v);&#10;  };&#10;&#10;  // 1. Moldura tribal e barra de vida estilizada para avatares&#10;  const AvatarFrame = ({ avatar, name, hp, color, isActive }) =&gt; (&#10;    &lt;div className={`flex flex-col items-center gap-1 ${isActive ? 'ring-4 ring-yellow-400 animate-glow' : ''}`} style={{ minWidth: 70 }}&gt;&#10;      &lt;div className=&quot;relative flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;absolute -inset-1 z-0 rounded-full border-4 border-green-900 bg-gradient-to-br from-green-700/60 to-yellow-800/60 shadow-xl animate-pulse-slow&quot; style={{ filter: 'blur(2px)' }}&gt;&lt;/div&gt;&#10;        &lt;img src={avatar} alt={name} className=&quot;w-14 h-14 rounded-full border-4 border-yellow-700 z-10&quot; /&gt;&#10;        &lt;div className=&quot;absolute -bottom-2 left-1/2 -translate-x-1/2 flex items-center gap-1 bg-black/80 px-2 py-0.5 rounded-full border-2 border-yellow-400 shadow&quot;&gt;&#10;          &lt;span className=&quot;text-red-400 text-lg&quot;&gt;❤&lt;/span&gt;&#10;          &lt;span className=&quot;text-yellow-100 font-bold text-sm&quot;&gt;{hp}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;      &lt;span className=&quot;text-xs font-bold text-yellow-200 drop-shadow&quot;&gt;{name}&lt;/span&gt;&#10;    &lt;/div&gt;&#10;  );&#10;&#10;  // Painel de debug&#10;  const [debugOpen, setDebugOpen] = useState(false);&#10;  const [debugState, setDebugState] = useState({&#10;    playerHP: gameState.playerHealth,&#10;    opponentHP: gameState.opponentHealth,&#10;    field: currentField,&#10;    playerActive: activeCards.player?.id || '',&#10;    opponentActive: activeCards.opponent?.id || '',&#10;    hand: playerHand.map(c =&gt; c.id).join(',')&#10;  });&#10;&#10;  // Atualiza debugState ao mudar o jogo&#10;  useEffect(() =&gt; {&#10;    setDebugState({&#10;      playerHP: gameState.playerHealth,&#10;      opponentHP: gameState.opponentHealth,&#10;      field: currentField,&#10;      playerActive: activeCards.player?.id || '',&#10;      opponentActive: activeCards.opponent?.id || '',&#10;      hand: playerHand.map(c =&gt; c.id).join(',')&#10;    });&#10;  }, [gameState, currentField, activeCards, playerHand]);&#10;&#10;  function handleDebugChange(e) {&#10;    const { name, value } = e.target;&#10;    setDebugState(prev =&gt; ({ ...prev, [name]: value }));&#10;  }&#10;&#10;  function applyDebugState() {&#10;    setGameState(prev =&gt; ({&#10;      ...prev,&#10;      playerHealth: Number(debugState.playerHP),&#10;      opponentHealth: Number(debugState.opponentHP)&#10;    }));&#10;    setCurrentField(debugState.field);&#10;    setActiveCards(prev =&gt; ({&#10;      ...prev,&#10;      player: getCardData(debugState.playerActive),&#10;      opponent: getCardData(debugState.opponentActive)&#10;    }));&#10;    setPlayerHand(debugState.hand.split(',').map(id =&gt; getCardData(id)).filter(Boolean));&#10;  }&#10;&#10;  function debugPassTurn() {&#10;    endTurn();&#10;  }&#10;&#10;  // Função para obter a imagem de fundo do campo atual&#10;  const getFieldBgImage = () =&gt; {&#10;    return fields[currentField]?.bgImage || '/images/backgrounds/forest.jpg';&#10;  };&#10;&#10;  return (&#10;    &lt;BoardBackground bgImage={getFieldBgImage()}&gt;&#10;      {/* Botão flutuante de debug */}&#10;      &lt;button&#10;        onClick={() =&gt; setDebugOpen(v =&gt; !v)}&#10;        style={{ position: 'fixed', top: 16, right: 16, zIndex: 1000 }}&#10;        className=&quot;bg-pink-700 text-white px-3 py-2 rounded-full shadow-lg hover:bg-pink-800 transition&quot;&#10;      &gt;&#10;        {debugOpen ? 'Fechar Debug' : 'Debug'}&#10;      &lt;/button&gt;&#10;      {debugOpen &amp;&amp; (&#10;        &lt;div className=&quot;fixed top-20 right-4 z-[1001] bg-black/90 text-white p-4 rounded-xl shadow-2xl w-80 border-2 border-pink-600 flex flex-col gap-2 animate-fade-in&quot;&gt;&#10;          &lt;div className=&quot;font-bold text-lg mb-2&quot;&gt;Painel de Debug&lt;/div&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;HP Jogador&#10;            &lt;input type=&quot;number&quot; name=&quot;playerHP&quot; value={debugState.playerHP} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;HP Oponente&#10;            &lt;input type=&quot;number&quot; name=&quot;opponentHP&quot; value={debugState.opponentHP} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;Campo/Terreno&#10;            &lt;select name=&quot;field&quot; value={debugState.field} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot;&gt;&#10;              {Object.keys(fields).map(f =&gt; (&#10;                &lt;option key={f} value={f}&gt;{fields[f].name}&lt;/option&gt;&#10;              ))}&#10;            &lt;/select&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;Carta Ativa Jogador (id)&#10;            &lt;input type=&quot;text&quot; name=&quot;playerActive&quot; value={debugState.playerActive} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;Carta Ativa Oponente (id)&#10;            &lt;input type=&quot;text&quot; name=&quot;opponentActive&quot; value={debugState.opponentActive} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;label className=&quot;flex flex-col text-xs mb-1&quot;&gt;Cartas na Mão (ids separados por vírgula)&#10;            &lt;input type=&quot;text&quot; name=&quot;hand&quot; value={debugState.hand} onChange={handleDebugChange} className=&quot;bg-gray-800 rounded px-2 py-1 mt-1&quot; /&gt;&#10;          &lt;/label&gt;&#10;          &lt;div className=&quot;flex gap-2 mt-2&quot;&gt;&#10;            &lt;button onClick={applyDebugState} className=&quot;bg-green-700 px-3 py-1 rounded hover:bg-green-800&quot;&gt;Aplicar&lt;/button&gt;&#10;            &lt;button onClick={debugPassTurn} className=&quot;bg-blue-700 px-3 py-1 rounded hover:bg-blue-800&quot;&gt;Passar Turno&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      &lt;main className={`min-h-screen text-white relative overflow-hidden bg-gradient-to-br ${fields[currentField].bg}`}&gt;&#10;        {/* Fundo animado do campo */}&#10;        &lt;div ref={fieldBgRef} className={`absolute inset-0 z-0 transition-all duration-1000 ${fieldTransitioning ? 'opacity-0 scale-105 blur-sm' : 'opacity-100 scale-100 blur-0'}`}&gt;&#10;          {/* Textura de fundo baseada no campo */}&#10;          &lt;div className=&quot;absolute inset-0 opacity-30&quot;&gt;&#10;            {currentField === 'floresta' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[radial-gradient(circle_at_30%_70%,rgba(34,197,94,0.3)_1px,transparent_1px)] bg-[length:60px_60px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'rio' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[linear-gradient(45deg,rgba(59,130,246,0.2)_25%,transparent_25%,transparent_75%,rgba(59,130,246,0.2)_75%)] bg-[length:40px_40px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'caatinga' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(245,158,11,0.3)_1px,transparent_1px)] bg-[length:80px_80px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'pantanal' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[linear-gradient(90deg,rgba(16,185,129,0.2)_50%,rgba(107,114,128,0.2)_50%)] bg-[length:60px_30px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'lua' &amp;&amp; (&#10;              &lt;div className=&quot;absolute inset-0 bg-[radial-gradient(circle_at_50%_20%,rgba(147,51,234,0.4)_1px,transparent_1px)] bg-[length:100px_100px]&quot;&gt;&lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          {/* Elementos decorativos do campo */}&#10;          &lt;div className=&quot;absolute inset-0 opacity-20 pointer-events-none&quot;&gt;&#10;            {currentField === 'floresta' &amp;&amp; (&#10;              &lt;div className=&quot;text-7xl absolute top-10 left-10 animate-pulse-slow&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'rio' &amp;&amp; (&#10;              &lt;div className=&quot;text-7xl absolute top-20 right-20 animate-bounce&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'caatinga' &amp;&amp; (&#10;              &lt;div className=&quot;text-7xl absolute bottom-20 left-20 animate-pulse&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'pantanal' &amp;&amp; (&#10;              &lt;div className=&quot;text-7xl absolute top-1/3 right-10 animate-bounce&quot;&gt;&lt;/div&gt;&#10;            )}&#10;            {currentField === 'lua' &amp;&amp; (&#10;              &lt;div className=&quot;text-9xl absolute top-10 right-1/3 animate-pulse&quot;&gt;&lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;relative z-10 h-screen p-2 flex flex-col justify-between&quot;&gt;&#10;          {/* Linha superior: Oponente e campo */}&#10;          &lt;div className=&quot;flex flex-row justify-between items-start w-full&quot;&gt;&#10;            {/* Canto superior esquerdo: Info do oponente */}&#10;            &lt;div className=&quot;flex flex-col items-start gap-2 mt-2 ml-2&quot;&gt;&#10;              &lt;AvatarFrame avatar=&quot;/images/avatars/opponent.png&quot; name=&quot;Oponente&quot; hp={gameState.opponentHealth} color=&quot;red&quot; isActive={gameState.turn==='opponent'} /&gt;&#10;            &lt;/div&gt;&#10;            {/* Centro superior: Encantado ativo do oponente */}&#10;            &lt;div className=&quot;flex flex-col items-center flex-1&quot;&gt;&#10;              &lt;div className=&quot;relative flex flex-col items-center&quot;&gt;&#10;                &lt;div className=&quot;w-32 h-32 rounded-full bg-gradient-to-t from-indigo-900/80 to-indigo-700/60 border-4 border-blue-400 flex items-center justify-center shadow-2xl mb-2 animate-pulse&quot;&gt;&#10;                  {activeCards.opponent &amp;&amp; (&#10;                    &lt;CardImage card={activeCards.opponent} className=&quot;w-24 h-24&quot; /&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-center text-xs text-blue-200 font-semibold&quot;&gt;&#10;                  {activeCards.opponent?.name || '---'}&#10;                &lt;/div&gt;&#10;                {/* Habilidades do oponente */}&#10;                {activeCards.opponent &amp;&amp; (&#10;                  &lt;div className=&quot;flex flex-row gap-2 mt-1 text-xs&quot;&gt;&#10;                    &lt;span className=&quot;bg-blue-900/60 px-2 py-0.5 rounded&quot;&gt;{activeCards.opponent.abilities?.basic?.name || '-'}&lt;/span&gt;&#10;                    &lt;span className=&quot;bg-yellow-900/60 px-2 py-0.5 rounded&quot;&gt;{activeCards.opponent.abilities?.ultimate?.name || '-'}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {/* Lado direito: Pilha de compra */}&#10;            &lt;div className=&quot;flex flex-col items-end gap-2 mt-2 mr-2&quot;&gt;&#10;              &lt;div className=&quot;flex flex-col items-center&quot;&gt;&#10;                &lt;div className=&quot;w-12 h-16 bg-blue-900/60 border-2 border-blue-400 rounded-lg flex items-center justify-center shadow-lg relative&quot;&gt;&#10;                  &lt;span className=&quot;text-blue-200 font-bold&quot;&gt;Compra&lt;/span&gt;&#10;                  {deck.length &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-2 -right-2 bg-blue-600 text-xs rounded-full px-2 py-0.5&quot;&gt;{deck.length}&lt;/span&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;                &lt;span className=&quot;text-xs text-blue-300 mt-1&quot;&gt;Baralho&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Centro do tabuleiro: Campo e Encantados */}&#10;          &lt;div className=&quot;relative flex flex-col items-center justify-center flex-1&quot;&gt;&#10;            {/* Indicador de campo/terreno atual */}&#10;            &lt;div className=&quot;absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 z-20 flex flex-col items-center&quot;&gt;&#10;              &lt;div className=&quot;flex items-center gap-2 bg-black/60 px-4 py-1 rounded-full border-2 border-yellow-400 shadow-lg&quot;&gt;&#10;                &lt;span className=&quot;text-2xl&quot;&gt;{fields[currentField].icon}&lt;/span&gt;&#10;                &lt;span className=&quot;font-bold text-yellow-100&quot;&gt;{fields[currentField].name}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-xs text-yellow-200 mt-1&quot;&gt;{fields[currentField].effect}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {/* Encantado ativo do jogador (centro inferior) */}&#10;            &lt;div className=&quot;absolute bottom-24 left-1/2 -translate-x-1/2 flex flex-col items-center z-10&quot;&gt;&#10;              &lt;div&#10;                className={`w-32 h-32 rounded-full bg-gradient-to-b from-amber-900/80 to-yellow-700/60 border-4 border-yellow-400 flex items-center justify-center shadow-2xl mb-2 animate-pulse cursor-pointer transition-all duration-300 ${bonusGlow ? 'ring-4 ring-green-400 shadow-green-400/60' : ''} ${gameState.turn === 'player' ? 'animate-glow' : ''}`}&#10;                onClick={handleActiveCardClick}&#10;                title=&quot;Clique para ver habilidades&quot;&#10;              &gt;&#10;                {activeCards.player &amp;&amp; (&#10;                  &lt;CardImage card={activeCards.player} className=&quot;w-24 h-24&quot; /&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-center text-xs text-yellow-200 font-semibold&quot;&gt;&#10;                {activeCards.player?.name || '---'}&#10;              &lt;/div&gt;&#10;              {/* Menu de habilidades ao clicar */}&#10;              {showSkillMenu &amp;&amp; activeCards.player &amp;&amp; (&#10;                &lt;div className=&quot;flex flex-row gap-3 mt-2 animate-fade-in&quot;&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-blue-400 shadow-lg hover:bg-blue-900/80 transition&quot;&#10;                    onClick={useSkill}&#10;                    disabled={gameState.actionUsed || activeCards.player.skillCooldown &gt; 0}&#10;                    title={activeCards.player.abilities?.basic?.description || 'Habilidade Básica'}&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;✨&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;{activeCards.player.abilities?.basic?.name || 'Skill'}&lt;/span&gt;&#10;                    {activeCards.player.skillCooldown &gt; 0 &amp;&amp; (&#10;                      &lt;span className=&quot;text-xs text-blue-200&quot;&gt;{activeCards.player.skillCooldown}t&lt;/span&gt;&#10;                    )}&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-yellow-400 shadow-lg hover:bg-yellow-900/80 transition&quot;&#10;                    onClick={useUltimate}&#10;                    disabled={gameState.actionUsed || gameState.playerUltimate &lt; 100}&#10;                    title={activeCards.player.abilities?.ultimate?.description || 'Ultimate'}&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;{activeCards.player.abilities?.ultimate?.name || 'Ultimate'}&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs text-yellow-200&quot;&gt;{gameState.playerUltimate}/100&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-green-400 shadow-lg hover:bg-green-900/80 transition&quot;&#10;                    onClick={endTurn}&#10;                    disabled={gameState.turn !== 'player'}&#10;                    title=&quot;Finalizar Turno&quot;&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;⏭️&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;Finalizar&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Linha inferior: Info do jogador, mão, habilidades */}&#10;          &lt;div className=&quot;flex flex-row justify-between items-end w-full mb-4&quot;&gt;&#10;            {/* Canto inferior esquerdo: Info do jogador */}&#10;            &lt;div className=&quot;flex flex-col items-start gap-2 ml-2 mb-2&quot;&gt;&#10;              &lt;AvatarFrame avatar=&quot;/images/avatars/player.jpg&quot; name=&quot;Você&quot; hp={gameState.playerHealth} color=&quot;yellow&quot; isActive={gameState.turn==='player'} /&gt;&#10;            &lt;/div&gt;&#10;            {/* Inferior central: Mão do jogador */}&#10;            &lt;div className=&quot;flex flex-row items-end justify-center flex-1 gap-[-2rem]&quot;&gt;&#10;              {playerHand.map((card, idx) =&gt; (&#10;                &lt;div&#10;                  key={card.id}&#10;                  className={`relative transition-transform duration-200 hover:z-20 hover:-translate-y-8 cursor-pointer -ml-8 ${selectedCard?.id === card.id ? 'ring-4 ring-yellow-400' : ''} ${bonusGlow &amp;&amp; idx === playerHand.length - 1 ? 'animate-card-draw' : ''}`}&#10;                  style={{ zIndex: idx + 1 }}&#10;                  onClick={() =&gt; setSelectedCard(card)}&#10;                  onDoubleClick={() =&gt; playCard(card)}&#10;                &gt;&#10;                  &lt;CardImage card={card} className=&quot;w-20 h-28 rounded-lg border-2 border-white/30 shadow-lg&quot; /&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;            {/* Inferior direito: Habilidades */}&#10;            &lt;div className=&quot;flex flex-col items-end gap-2 mr-4 mb-2&quot;&gt;&#10;              {activeCards.player &amp;&amp; (&#10;                &lt;div className=&quot;flex flex-row gap-3&quot;&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-blue-400 shadow-lg hover:bg-blue-900/80 transition&quot;&#10;                    onClick={useSkill}&#10;                    disabled={gameState.actionUsed || activeCards.player.skillCooldown &gt; 0}&#10;                    title={activeCards.player.abilities?.basic?.description || 'Habilidade Básica'}&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;✨&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;{activeCards.player.abilities?.basic?.name || 'Skill'}&lt;/span&gt;&#10;                    {activeCards.player.skillCooldown &gt; 0 &amp;&amp; (&#10;                      &lt;span className=&quot;text-xs text-blue-200&quot;&gt;{activeCards.player.skillCooldown}t&lt;/span&gt;&#10;                    )}&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    className=&quot;flex flex-col items-center bg-black/60 px-3 py-2 rounded-lg border-2 border-yellow-400 shadow-lg hover:bg-yellow-900/80 transition&quot;&#10;                    onClick={useUltimate}&#10;                    disabled={gameState.actionUsed || gameState.playerUltimate &lt; 100}&#10;                    title={activeCards.player.abilities?.ultimate?.description || 'Ultimate'}&#10;                  &gt;&#10;                    &lt;span className=&quot;text-lg&quot;&gt;&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs mt-1&quot;&gt;{activeCards.player.abilities?.ultimate?.name || 'Ultimate'}&lt;/span&gt;&#10;                    &lt;span className=&quot;text-xs text-yellow-200&quot;&gt;{gameState.playerUltimate}/100&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          {/* Lado esquerdo: Pilha de descarte */}&#10;          &lt;div className=&quot;absolute left-0 top-1/2 -translate-y-1/2 flex flex-col items-center&quot;&gt;&#10;            &lt;div className=&quot;w-12 h-16 bg-gray-800/60 border-2 border-gray-400 rounded-lg flex items-center justify-center shadow-lg relative&quot;&gt;&#10;              &lt;span className=&quot;text-gray-200 font-bold&quot;&gt;Descarte&lt;/span&gt;&#10;              {discardPile.length &gt; 0 &amp;&amp; (&#10;                &lt;span className=&quot;absolute -top-2 -right-2 bg-red-600 text-xs rounded-full px-2 py-0.5&quot;&gt;{discardPile.length}&lt;/span&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;span className=&quot;text-xs text-gray-300 mt-1&quot;&gt;Desencanto&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          {/* Indicador de turno (brilho no avatar do jogador ativo) já incluso nas classes dos avatares) */}&#10;        &lt;/div&gt;&#10;      &lt;/main&gt;&#10;    &lt;/BoardBackground&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Board/BoardBackground.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Board/BoardBackground.js" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;export default function BoardBackground({ bgImage, children }) {&#10;  return (&#10;    &lt;div&#10;      style={{&#10;        minHeight: '100vh',&#10;        width: '100vw',&#10;        backgroundImage: `url(${bgImage})`,&#10;        backgroundSize: 'cover',&#10;        backgroundPosition: 'center',&#10;        transition: 'background-image 0.8s cubic-bezier(0.4,0,0.2,1)'&#10;      }}&#10;    &gt;&#10;      {children}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>